import{_ as s,c as a,a2 as e,o as t}from"./chunks/framework.Dvyrx0Dh.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"packages/pocket/doc/pocket.audiopreloader.md","filePath":"packages/pocket/doc/pocket.audiopreloader.md"}'),p={name:"packages/pocket/doc/pocket.audiopreloader.md"};function l(k,i,h,n,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<p><a href="./">Home</a> &gt; <a href="./pocket.html">@ailer/pocket</a> &gt; <a href="./pocket.audiopreloader.html">audioPreloader</a></p><h2 id="audiopreloader-variable" tabindex="-1">audioPreloader variable <a class="header-anchor" href="#audiopreloader-variable" aria-label="Permalink to &quot;audioPreloader variable&quot;">​</a></h2><p>音频预加载</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes light-plus github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#B392F0;">audioPreloader</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#B392F0;">    loadAudio</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">src</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#267F99;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">AudioBuffer</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;"> HTMLAudioElement</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#B392F0;">    play</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">buffer</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">AudioBuffer</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;"> HTMLAudioElement</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">HTMLAudioElement</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;"> AudioBufferSourceNode</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#0000FF;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5)]))}const c=s(p,[["render",l]]);export{E as __pageData,c as default};
