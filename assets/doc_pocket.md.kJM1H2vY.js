import{_ as t,c as e,o as p,a4 as a}from"./chunks/framework.CFyxHDRz.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/pocket.md","filePath":"doc/pocket.md"}'),d={name:"doc/pocket.md"},r=a('<p><a href="./">Home</a> &gt; <a href="./pocket.html">@ailer/pocket</a></p><h2 id="pocket-package" tabindex="-1">pocket package <a class="header-anchor" href="#pocket-package" aria-label="Permalink to &quot;pocket package&quot;">​</a></h2><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table><thead><tr><th><p>Function</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p><a href="./pocket.base64toblob.html">base64ToBlob(base64Data, mimeType)</a></p></td><td><p>将 base64 编码的数据转换为 Blob 对象</p></td></tr><tr><td><p><a href="./pocket.byteslength.html">bytesLength(str)</a></p></td><td><p>计算字符串的字节数 英文字符算一个字节，中文字符算两个字节</p></td></tr><tr><td><p><a href="./pocket.canvastoimage.html">canvasToImage(canvas, quality)</a></p></td><td><p>将 Canvas 转换为图像对象</p></td></tr><tr><td><p><a href="./pocket.clamp.html">clamp(v, min, max)</a></p></td><td><p>返回一个在指定范围内的值 如果最小值大于最大值，则会自动交换它们</p></td></tr><tr><td><p><a href="./pocket.clipboard.html">clipboard(text)</a></p></td><td><p>复制文本到剪贴板</p></td></tr><tr><td><p><a href="./pocket.clone.html">clone(source)</a></p></td><td><p>克隆对象，优先使用简单克隆方法，如果出错则使用深层克隆方法</p></td></tr><tr><td><p><a href="./pocket.clonedeep.html">cloneDeep(value, cache)</a></p></td><td><p>克隆深层对象</p></td></tr><tr><td><p><a href="./pocket.clonesimple.html">cloneSimple(data)</a></p></td><td><p>克隆简单对象</p></td></tr><tr><td><p><a href="./pocket.compose.html">compose(fns)</a></p></td><td><p>函数组合，执行顺序从右到左 最后一个函数参数可以传递多个参数，其他函数必须是单参数函数</p></td></tr><tr><td><p><a href="./pocket.debounce.html">debounce(callback, delay, immediate, hint)</a></p></td><td><p>防抖函数，限制某个函数在连续触发的情况下只执行一次</p></td></tr><tr><td><p><a href="./pocket.deepget.html">deepGet(nestedObj, path)</a></p></td><td><p>从嵌套对象中获取指定路径的值</p></td></tr><tr><td><p><a href="./pocket.delay.html">delay(ms)</a></p></td><td><p>创建一个 Promise，在指定的毫秒数后解析</p></td></tr><tr><td><p><a href="./pocket.deletecookie.html">deleteCookie(name)</a></p></td><td><p>删除 Cookie</p></td></tr><tr><td><p><a href="./pocket.downloadbyblob.html">downloadByBlob(blob, fileName)</a></p></td><td><p>通过 Blob 对象进行文件下载</p></td></tr><tr><td><p><a href="./pocket.downloadbycanvas.html">downloadByCanvas(canvas, fileName, format)</a></p></td><td><p>通过 Canvas 元素下载图像文件</p></td></tr><tr><td><p><a href="./pocket.downloadbyurl.html">downloadByUrl(url, fileName)</a></p></td><td><p>通过指定的 URL 下载文件</p></td></tr><tr><td><p><a href="./pocket.ensureprefix.html">ensurePrefix(s, prefix)</a></p></td><td><p>如果字符串不以指定的前缀开头，则在字符串前添加前缀。</p></td></tr><tr><td><p><a href="./pocket.enterfullscreen.html">enterFullScreen(element)</a></p></td><td><p>进入全屏模式</p></td></tr><tr><td><p><a href="./pocket.exitfullscreen.html">exitFullScreen()</a></p></td><td><p>退出全屏模式</p></td></tr><tr><td><p><a href="./pocket.fetchblob.html">fetchBlob(url)</a></p></td><td><p>将指定 URL 的资源转换为 Blob 对象</p></td></tr><tr><td><p><a href="./pocket.fill.html">fill(length, value)</a></p></td><td><p>创建一个包含指定长度的数组，并使用指定的值填充该数组</p></td></tr><tr><td><p><a href="./pocket.flat.html">flat(arr, deep)</a></p></td><td><p>将多维数组扁平化为一维数组。</p></td></tr><tr><td><p><a href="./pocket.formattime.html">formatTime(time, format)</a></p></td><td><p>格式化时间</p></td></tr><tr><td><p><a href="./pocket.getcookie.html">getCookie(name)</a></p></td><td><p>获取 Cookie</p></td></tr><tr><td><p><a href="./pocket.getdomain.html">getDomain()</a></p></td><td><p>获取当前页面的域名</p></td></tr><tr><td><p><a href="./pocket.getitem.html">getItem(key)</a></p></td><td><p>获取 localStorage 中指定键的值</p></td></tr><tr><td><p><a href="./pocket.gettype.html">getType(param)</a></p></td><td><p>获取参数的类型</p></td></tr><tr><td><p><a href="./pocket.hextorgb.html">hexToRgb(hex)</a></p></td><td><p>将十六进制颜色代码转换为 RGB 颜色数组</p></td></tr><tr><td><p><a href="./pocket.idleloadresource.html">idleLoadResource(files, loadMethod)</a></p></td><td><p>空闲时加载资源</p></td></tr><tr><td><p><a href="./pocket.imagetoblob.html">imageToBlob(img)</a></p></td><td><p>将 HTML 图像元素转换为 Blob 对象</p></td></tr><tr><td><p><a href="./pocket.imagetocanvas.html">imageToCanvas(img, size)</a></p></td><td><p>将 HTML 图像元素转换为具有指定大小的画布元素</p></td></tr><tr><td><p><a href="./pocket.imagetodatauri.html">imageToDataURI(img, type)</a></p></td><td><p>将 HTML 图像元素转换为数据 URI</p></td></tr><tr><td><p><a href="./pocket.isbase64.html">isBase64(str)</a></p></td><td></td></tr><tr><td><p><a href="./pocket.isfullscreen.html">isFullScreen()</a></p></td><td><p>检查当前是否处于全屏模式</p></td></tr><tr><td><p><a href="./pocket.ishexcolor.html">isHexColor(color)</a></p></td><td><p>判断一个字符串是否为有效的十六进制颜色代码</p></td></tr><tr><td><p><a href="./pocket.isrgbcolor.html">isRgbColor(color)</a></p></td><td></td></tr><tr><td><p><a href="./pocket.istype.html">isType(type)</a></p></td><td></td></tr><tr><td><p><a href="./pocket.pipe.html">pipe(fns)</a></p></td><td><p>函数组合， 执行顺序从左到右 第一个函数参数可以传递多个参数，其他函数必须是单参数函数</p></td></tr><tr><td><p><a href="./pocket.querytojson.html">queryToJson(url, options)</a></p></td><td><p>将url地址的query参数转换为JSON数据 1⃣️?a=1&amp;b=2 =&gt; {a:1, b:2} 2⃣️?a[0]=1 =&gt; {&quot;a[0]&quot;: 1} 3 支持多问号 ?a=1&amp;#/result?b=1&amp;a=2 =&gt; {b: 1, a: 2}</p></td></tr><tr><td><p><a href="./pocket.random.html">random(from, to)</a></p></td><td><p>生成一个指定范围内的随机整数</p></td></tr><tr><td><p><a href="./pocket.removeitem.html">removeItem(key)</a></p></td><td><p>移除 localStorage 中指定键的值</p></td></tr><tr><td><p><a href="./pocket.rgbtohex.html">rgbToHex(rgb)</a></p></td><td><p>将 RGB 颜色数组转换为十六进制颜色代码</p></td></tr><tr><td><p><a href="./pocket.setcookie.html">setCookie(name, value, days)</a></p></td><td><p>设置 Cookie</p></td></tr><tr><td><p><a href="./pocket.setitem.html">setItem(key, value)</a></p></td><td><p>设置 localStorage 中指定键的值</p></td></tr><tr><td><p><a href="./pocket.stripprefix.html">stripPrefix(s, prefix)</a></p></td><td><p>如果字符串以指定的前缀开头，则去除该前缀并返回结果字符串；否则返回原始字符串</p></td></tr><tr><td><p><a href="./pocket.syncnexttick.html">syncNextTick(vueInstance)</a></p></td><td><p>返回一个 Promise，在下一个 Vue.js 的 tick 循环中解析 此函数用于在 Vue.js 更新 DOM 后执行同步操作</p></td></tr><tr><td><p><a href="./pocket.throttle.html">throttle(fn, wait, { leading, trailing }, hint)</a></p></td><td><p>节流函数，限制某个函数在一定时间间隔内只能执行一次</p></td></tr><tr><td><p><a href="./pocket.togglefullscreen.html">toggleFullScreen(element)</a></p></td><td><p>切换全屏模式</p></td></tr><tr><td><p><a href="./pocket.tohex.html">toHex(n)</a></p></td><td><p>将数字转换为十六进制字符串，并确保输出的字符串是两位数，如果不足两位，则在前面补充零，并将结果转换为大写字母形式</p></td></tr><tr><td><p><a href="./pocket.unique.html">unique(arr)</a></p></td><td><p>从数组中移除重复的元素并返回一个新的数组</p></td></tr><tr><td><p><a href="./pocket.validateformula.html">validateFormula(value, callback)</a></p></td><td><p>验证数学公式的合法性</p></td></tr></tbody></table><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><table><thead><tr><th><p>Variable</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p><a href="./pocket.audiopreloader.html">audioPreloader</a></p></td><td><p>音频预加载</p></td></tr></tbody></table>',6),o=[r];function l(h,c,i,m,n,s){return p(),e("div",null,o)}const b=t(d,[["render",l]]);export{k as __pageData,b as default};
